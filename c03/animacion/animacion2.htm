<!DOCTYPE html>
<!-- saved from url=(0082)https://virtual2.umng.edu.co/pluginfile.php/1586194/mod_label/intro/animacion1.htm -->
<html>

<head>
    <!--<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> -->
    <title>Primera Escena con Three.js</title>

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/stats.js/10/Stats.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js"></script>
    <script type="text/javascript"src="https://cs.wellesley.edu/~cs307/threejs/libs/OrbitControls-r95.js"></script>
    <style>
        body {
            /* configurar margin a 0 y overflow a hidden, para ocupar pantalla completa */
            margin: 0;
            overfLow: hidden;
        }
    </style>
</head>

<body>
    <div id="Stats-Salida"></div>
    <!-- Div que contendre la salida -->
    <div id="WebGL-salida">
    </div>

    <!-- Codigo Javascript que ejecuta nuestros ejemplos Three.js -->
    <script type="text/javascript">

        // una vez que todo ha sido cargado, ejecutamos nuestro contenido Three.js.
        $(function () {

            var stats = initStats();

            // creamos una scene, que contendrá todos nuestros elementos, como objetos, cámaras y luces
            //var scene THREE.Scene();  //Falta declarar la escena agregando = new
            var scene = new THREE.Scene();  //Falta declarar la escena agregando = new

            // creamos una camera, que define desde donde vamos a mirar.
            var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);

            // creamos un render y configuramos el tamaño
            var renderer = new THREE.WebGLRenderer();

            //renderer.setClearColorHex(OxEEEEEE);
            renderer.setClearColor(new THREE.Color(0xEEEEEE));
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMapEnabled = true;

            //var axes = new THREE.AxisHelper(20);
            var axes = new THREE.AxesHelper(20);
            scene.add(axes);

            // creamos el plano del suelo
            var planeGeometry = new THREE.PlaneGeometry(60, 20);
            //var planeMaterial = new THREE.MeshBasicMaterial({ color: excccccc });   //Se debe cambiar la e por un 0, ya que al comenzar por una e no es un color hexadecimal
            var planeMaterial =  new THREE.MeshLambertMaterial({ color: 0xcccccc });
            var plane = new THREE.Mesh(planeGeometry, planeMaterial);
            plane.receiveShadow = true;
            const controls1 = new THREE.OrbitControls(camera, renderer.domElement);
       
       controls1.minDistance = 1;
       controls1.maxDistance = 40;
       controls1.enableDamping = true;
       controls1.dampingFactor = 0.5;
       controls1.maxPolarAngle = Math.PI;
       controls1.screenSpacePanning = true;

            // rotamos y posicionamos el plano
            //plane.rotation.x = -0.5 * Moth.PI;  //Correcion en la llamada de la libreria de Math.PI
            plane.rotation.x = -0.5 * Math.PI;
            plane.position.x = 15
            plane.position.y = 0
            plane.position.z = 0

            // añadimos el plano a la escena
            scene.add(plane);

            // creamos un cubo
            //var cubeGeometry = new THREE.CubeGeometry(4, 4, 4);

            var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);
            //var cubeMaterial = new THREE.MesheasicMaterial((color: 0xff0000, wireframe: true)); 
            var cubeMaterial =  new THREE.MeshLambertMaterial({ color: 0xff0000});  //Cambiar los segundos parentesis "()" por los corchetes y al definir el tipo de material se le hizo la correcion a MeshBasic
            var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.castShadow = true;

            // posicionamos el cubo
            cube.position.x = -4;
            cube.position.y = 3;
            cube.position.z = 0;

            // añadimos el cubo a la escena
            scene.add(cube);

            // creamos una esfera
            var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);
            var sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x7777ff});
            //var sphere = THREE.Mesh(sphereGeometry, sphereMaterial);  //Falta agregar el new 
            var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
            sphere.castShadow = true;

            // posicionamos la esfera
            sphere.position.x = 20;
            sphere.position.y = 4;
            sphere.position.z = 2;

            // añadimos la esfera a la escena
            scene.add(sphere);

            // posiciona y apunta la camara al centro de la escena
            camera.position.x = -30;
            camera.position.y = 40;
            camera.position.z = 30;
            camera.lookAt(scene.position);

            const spotLight = new THREE.SpotLight(0xffffff);
            spotLight.position.set(-40, 60, -10);


            spotLight.castShadow = true;

            spotLight.shadow.mapSize.width = 2048;
            spotLight.shadow.mapSize.height = 2048;
            spotLight.angle = Math.PI / 8.0;


            scene.add(spotLight);

            // añadir la salida de la renderizacion al elemento html
            $("#WebGL-salida").append(renderer.domElement);

           

            var step = 0;
            var controls = new function(){
                this.rotationSpeed = 0.02;
                this.bouncingSpeed = 0.03
            }
            var gui = new dat.GUI();
            gui.add(controls, "rotationSpeed", 0, 0.5);
            gui.add(controls, "bouncingSpeed", 0, 0.5);

            render();
            function render(){
                stats.update();

                cube.rotation.x += controls.rotationSpeed;
                cube.rotation.y += controls.rotationSpeed;
                cube.rotation.z += controls.rotationSpeed;
                step += controls.bouncingSpeed;
                sphere.position.x = 20+(10*(Math.cos(step)));
                sphere.position.y = 2+(10*Math.abs(Math.sin(step)));
                // renderizar la escena
                requestAnimationFrame(render)
                renderer.render(scene, camera);

            }
            function initStats(){

                var stats = new Stats();

                stats.setMode(0);
                stats.domElement.style.position = "absolute";
                stats.domElement.style.left = "0px";
                stats.domElement.style.top = "0px";
                $("#Stats-Salida").append(stats.domElement);

                return stats;
            }
            
        });


    </script>

</body>

</html>