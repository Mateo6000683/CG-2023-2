<!DOCTYPE html>
<html>

<head>
    <!--<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> -->
    <title>Primera Escena con Three.js</title>
     <!--< error script type="text/javascript" src="three.js"></script>-->
     <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!--< errorscript type="text/javascript" src="jquery-1.9.0.js"></script>-->
    <script src="https://cs.wellesley.edu/~cs307/threejs/libs/OrbitControls-r95.js"></script>
    <script  type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <style>
        body{
            /* configurar margin a 0 y overflow a hidden, para ocupar pantalla completa */
            margin: 0;
            overfLow: hidden;
        }
    </style>
</head>

<body>

    <!-- Div que contendre la salida -->
    <div id="WebGL-salida">
    </div>

    <!-- Codigo Javascript que ejecuta nuestros ejemplos Three.js -->
    <script type="text/javascript">
        
        // una vez que todo ha sido cargado, ejecutamos nuestro contenido Three.js.
        $(function () {  
            
            // creamos una scene, que contendrá todos nuestros elementos, como objetos, cámaras y luces
            //var scene THREE.Scene();  //Falta la instancia = new
            
            var scene = new THREE.Scene();  
            
            // creamos una camera, que define desde donde vamos a mirar.
            var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
            
            // creamos un render y configuramos el tamaño
            var renderer = new THREE.WebGLRenderer();
            
       
        // quitar la palabra hex renderer.setClearColorHex(OxEEEEEE);
        renderer.setClearColor(new THREE.Color (0xEEEEEE));
        renderer.setSize(window.innerWidth, window.innerHeight);

        // error de sintaxis var axes = new THREE.AxisHelper(20);
        var axes = new THREE.AxesHelper(20); 
        scene.add(axes);
        
        // creamos el plano del suelo
        var planeGeometry = new THREE.PlaneGeometry(60, 20);
        //var planeMaterial = new THREE.MeshBasicMaterial({ color: excccccc });   //Se debe cambiar la e por un 0, ya que al comenzar por una e no es un color hexadecimal
        var planeMaterial = new THREE.MeshBasicMaterial({ color: 0xcccccc });
        var plane = new THREE.Mesh(planeGeometry, planeMaterial);


        // rotamos y posicionamos el plano
        //plane.rotation.x = -0.5 * Moth.PI;  //Correcion en la llamada de la libreria de Math.PI
        plane.rotation.x = -0.5 * Math.PI;
        plane.position.x = 15
        plane.position.y = 0
        plane.position.z = 0

        // añadimos el plano a la escena
        scene.add(plane);

        // creamos un cubo
        //var cubeGeometry = new THREE.CubeGeometry(4, 4, 4); 
        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4); // era box geometry 
        //var cubeMaterial = new THREE.MesheasicMaterial((color: 0xff0000, wireframe: true)); 
        var cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });  //Cambiar los segundos parentesis "()" por los corchetes y al definir el tipo de material se le hizo la correcion a MeshBasic
        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);

        // posicionamos el cubo
        cube.position.x = -4;
        cube.position.y = 3;
        cube.position.z = 0;

        // añadimos el cubo a la escena
        scene.add(cube);
     
       
    
        // creamos una esfera
        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);
        var sphereMaterial = new THREE.MeshBasicMaterial({ color: 0x7777ff, wireframe: true });
        //var sphere = THREE.Mesh(sphereGeometry, sphereMaterial);  //Falta agregar el new 
        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);

        // posicionamos la esfera
        sphere.position.x = 20;
        sphere.position.y = 4;
        sphere.position.z = 2;

        // añadimos la esfera a la escena
        scene.add(sphere);

        // posiciona y apunta la camara al centro de la escena
        camera.position.x = -30;
        camera.position.y = 40;
        camera.position.z = 30;
        camera.lookAt(scene.position);
       

        // añadir la salida de la renderizacion al elemento html
        $("#WebGL-salida").append(renderer.domElement);


        // renderizar la escena
        renderer.render(scene, camera);
        });


    </script>

</body>

</html>
    
   
   